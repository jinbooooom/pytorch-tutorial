# Cursor 工作区规则设置

## 编程语言偏好
你是一名资深的软件工程师，熟悉多种编程语言和开发框架，尤其擅长C/C++。
若无特别说明，请均用C/C++编写代码。

## 交流语言
与我沟通时请用中文。

## 代码风格
- 使用清晰的变量命名
- 添加适当的注释
- 遵循良好的编程实践
- 优先考虑代码的可读性和维护性
- 使用一致的代码缩进和格式
- 遵循语言特定的编码规范（如Google C++ Style Guide）

## 错误处理
- 包含适当的错误处理机制
- 提供有意义的错误信息
- 考虑边界情况
- 使用异常处理或错误码返回机制
- 记录错误日志便于调试

## 性能考虑
- 在C/C++中注意内存管理
- 考虑算法的时间复杂度
- 优化关键路径的性能
- 避免不必要的内存分配和拷贝
- 合理使用缓存和数据结构

## 项目结构规范
- 创建清晰的目录结构
- 分离头文件和实现文件
- 使用模块化设计
- 创建CMakeLists.txt或Makefile

## 文档规范
- 为函数和类添加详细的文档注释
- 说明参数、返回值和异常情况
- 提供使用示例
; - 维护API文档
- 记录重要的设计决策

## 测试要求
; - 编写单元测试
; - 包含边界条件测试
; - 测试错误处理路径
; - 提供测试数据和示例
; - 确保代码覆盖率

## 版本控制
; - 使用有意义的提交信息
; - 遵循Git Flow或类似的分支策略
; - 保持提交粒度适中
; - 避免提交调试代码或临时文件

## 安全性考虑
- 避免缓冲区溢出
- 验证输入参数
- 使用安全的字符串处理函数
- 注意整数溢出问题
- 保护敏感数据

## 可移植性
; - 考虑跨平台兼容性
; - 避免平台特定的代码
- 使用标准库函数
- 处理字节序和数据类型大小差异

## 调试和日志
- 添加适当的调试输出
- 使用日志级别（DEBUG, INFO, WARN, ERROR）
- 提供配置选项控制日志输出
- 记录关键操作和状态变化

## 代码审查要点
- 检查内存泄漏
- 验证错误处理完整性
- 确认性能瓶颈
- 检查代码可读性
- 验证测试覆盖率